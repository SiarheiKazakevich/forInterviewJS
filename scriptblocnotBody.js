function createBlocnotBody() {
  try {
    let blocnotContainer = document.createElement("div");
    blocnotContainer.classList.add("blocnotBody");
    blocnotContainer.style.display = "flex";
    blocnotContainer.style.justifyContent = "center";
    blocnotContainer.style.alignItems = "center";
    blocnotContainer.style.flexDirection = "column";

    let qaPairs = [
      {
        question: "Вопрос 1.1: Что такое JavaScript?",
        answer: `JavaScript - это высокоуровневый, интерпретируемый язык программирования, который используется для создания интерактивных и динамических веб-страниц. Он позволяет разработчикам добавлять функциональность на сайты,
           такие как анимации, формы обратной связи, валидацию данных, обновление контента без перезагрузки страницы и многое другое.
          Основные характеристики JavaScript:
          1)Динамический: JavaScript является динамически типизированным языком, что означает, что типы переменных определяются во время выполнения.
          2)Объектно-ориентированный: Поддерживает объектно-ориентированное программирование, что позволяет создавать объекты и классы.
          3)Прототипное наследование: В JavaScript используется прототипное наследование, которое отличается от классического наследования, используемого в таких языках, как Java или C++.
          4)Интерпретируемый: JavaScript не требует компиляции, он интерпретируется браузером во время выполнения.
          5)Кросс-платформенный: Работает на разных платформах и устройствах, включая настольные компьютеры, мобильные устройства и серверы.`,
      },
      {
        question: "Вопрос 1.2: Что такое примитивные типы данных в JavaScript?",
        answer: `-Это данные, которые не являются объектом и не имеют методов
                 -Примитивные: string, number, boolean, null, undefined, bigint, symbol
                 -Остальные типы: object, function`,
      },
      {
        question:
          "Вопрос 1.3: Что нового привнес в JS стандарт ES6 или ECMAScript2015?",
        answer: `
        Стрелочные функции, 
        Классы, 
        Шаблонные строки,
        Расширенные объектные литералы,
        Деструктуризация,
        Промисы,
        Генераторы,
        Модули,
        Symbol,
        Прокси,
        Множества,
        Параметры по умолчанию,
        Операторы rest и spread,
        Блочная область видимости, ключевые слова «let» и «const»`,
      },
      {
        question: "Вопрос 1.4: Какие значения в JS являются ложными?",
        answer: `Пустая строка, 0, null, undefined, NaN, false`,
      },
      {
        question: "Вопрос 1.5: Чем отличается var, let и const в JavaScript?",
        answer: `Переменные, объявленные с помощью ключевого слова «var», являются глобальными. 
        Это означает, что они доступны из любого места в коде.Переменные, объявленные с помощью
         ключевых слов «let» и «const» имеют блочную область видимости.Разница между «let» и 
         «const» состоит в том, что в первом случае мы может менять значение переменной, а во 
         втором — нет.`,
      },
      {
         question: `Вопрос 1.6: Что произойдет в результате выражения var foo = 10 + "20" и почему?`,
      answer:`Переменная foo примет значение "1020"- В JavaScript это поведение называется приведением типов`,
      },
      {
        question: "Вопрос 1.7: Как быстро преобразовать строку в число?",
        answer:`Можно использовать унарный плюс, он преобразует строку в число, если это возможно. Унарный минус делает тоже самое`,
      },
      {
         question: "Вопрос 1.8: Почему результатом сравнения двух похожих объектов является false?",
         answer:`В отличии от примитивов объекты сравниваются по ссылке`,
      },
      {
         question: "Вопрос 1.9: Как проверить, является ли значение ложным?",
         answer:`Следует использовать функцию Boolean или оператор двойное отрицание`,
      },
      {
         question: "Вопрос 1.10: Как проверить, что число является четным, без использования деления с остатком?",
         answer:`Для решения данной задачи можно использовать оператор "&" (бинарное и). Оператор "&" сравнивает операнды как бинарные значенияconst isEven = num & 1 ? false : true`,
      },
      {
         question: "Вопрос 1.11: Какое отличие String() от toString()?",
         answer:`toString() не будет работать с undefined или null, потому что класс этих объектов не реализовывает метод toString, а поскольку String является независимым объектом, а не методом, унаследованным от прототипа, то его можно использовать с объектами, у которых нет метода toString()`,
      },
      {
         question: "Вопрос 1.12: Что такое шаблонные литералы?",
         answer:`Шаблонные литералы — относительно новый способ создания строк в JS. Шаблонные литералы создаются с помощью двойных обратных кавычек`,
      },
      {
         question: "Вопрос 1.13: Что такое NaN и какова его роль?",
         answer:`Это специальное значение «Not a Number», которое обычно говорит о том, что была выполнена бессмысленная операция, ошибка математической операции. Так же есть функция isNaN(), которая проверяет является ли строка не числом.`,
      },
      {
         question: "Вопрос 1.14: В чем разница между undefined и is not defined?",
         answer:`is not defined это код ошибки при обращении к не существующей переменной. undefined - это значение, присваемое объявленной, но не инициализированной переменной.`,
      },
      {
         question: "Вопрос 1.15: Для чего используется оператор логическое и?",
         answer:`Оператор логическое и, находит и возвращает первое ложное значение либо последний операнд, когда все значения истинные`,
      },
      {
         question: "Вопрос 1.16: В чем разница между атрибутами и свойствами?",
         answer:`Атрибут — это начальное состояние в рендеринге DOM, а свойство — это текущее состояние.`,
      },
      {
         question: "Вопрос 1.17: Для чего используется оператор логическое или?",
         answer:`Оператор логическое находит и возвращает первое истинное значение. Он также использует короткое замыкание.`,
      },
      {
         question: "Вопрос 1.18: Является ли использование унарного плюса самым быстрым способом преобразования строки в число?",
         answer:`Согласно MDN оператор "+" действительно является самым быстрым способом преобразования строки в число, поскольку он не выполняет никаких операций со значением, которое является числом.`,
      },
      {
         question: "Вопрос 1.19: Что такое DOM?",
         answer:`DOM или Document Object Model (объектная модель документа) — это прикладной программный интерфейс (API) для работы с HTML и XML документами.`,
      },
      {
         question: "Вопрос 1.20: Почему результатом сравнения двух похожих объектов является false?",
         answer:`В JS объекты и примитивы сравниваются по-разному. Примитивы сравниваются по значению. Объекты — по ссылке или адресу в памяти, где хранится переменная.`,
      },
      {
         question: "Вопрос 1.21: Для чего используется оператор двойное отрицание?",
         answer:`Оператор двойное отрицание приводит значение справа от него к логическому значению.`,
      },
      {
         question: "Вопрос 1.22: Как записать несколько выражений в одну строку?",
         answer:`Для этого мы можем использовать оператор запятая.`,
      },
      {
         question: "Вопрос 1.23: Что такое область видимости (Scope)?",
         answer:`Область видимости — это место, где мы имеем доступ к переменным или функциям. JS имеем три типа областей видимости: глобальная, функциональная и блочная.`,
      },
      {
         question: "Вопрос 1.24: Как динамически добавлять и удалять свойства в обьект?",
         answer:`Вы можете добавить свойство к объекту используя, myObject.propName = value, и удалить свойство, используя delete myObject.propName.`,
      },
      {
         question: "Вопрос 1.25: Что делает Object.freeze()?",
         answer:`Object.freeze работает со значениями объектов и делает объект неизменяемым, то есть изменить его свойства невозможно. Можно проверить заморожен ли объект с помощью Object.isFrozen().`,
      },
      {
         question: "Вопрос 1.26: Как можно клонировать объект?",
         answer:`-Оператор spread,
                 -Object assign,
                 -глубокое клонирование: JSON parse c JSON stringify.`,
      },
      {
        question: "Вопрос 1.27: Как определить наличие свойства в объекте?",
         answer:`-Оператор in,
               -Метод hasOwnProperty`, 
      },
      {
        question: "Вопрос 1.28: Как в JS создать объект?",
         answer:`Объектный литерал,
                 Функция-конструктор,
                 Метод Object create.`, 
      },
      {
        question: "Вопрос 1.29: В чем разница между оператором «in» и методом hasOwnProperty?",
         answer:`Оператор «in» проверяет наличие свойства не только в самом объекте, но и в его прототипах, а метод hasOwnProperty — только в объекте.`, 
      },
      {
        question: "Вопрос 1.30: Какие конструкции языка вы используете для обхода объектов?",
         answer:`Цикл for in или Object keys и forEach.`, 
      },
      {
        question: "Вопрос 1.31: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.32: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.33: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.34: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.35: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.36: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.37: ?",
         answer:``, 
      },
      {
        question: "Вопрос 1.38: ?",
         answer:``, 
      },
      {},{},{},{},{},{},{},{},{},{},{},{},{},{},{}{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},
      {},{},{},{},{},{},{},{},{},{},{},{},{},{},{}{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},
      {},{},{},{},{},{},{},{},{},{},{},{},{},{},{}{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},
    ];
    qaPairs.forEach((pair) => {
      let question = document.createElement("div");
      question.textContent = pair.question;
      question.classList.add("question");
      question.style.cursor = "pointer";
      question.style.fontWeight = "bold";
      question.style.border = "1px solid black";
      question.style.margin = "2px 0px 2px 0px";
      blocnotContainer.appendChild(question);

      let answer = document.createElement("div");
      answer.textContent = pair.answer;
      answer.classList.add("answer");
      answer.style.display = "none";
      answer.style.marginLeft = "20px";
      blocnotContainer.appendChild(answer);

      question.addEventListener("click", () => {
        answer.style.display =
          answer.style.display === "none" ? "block" : "none";
      });
    });
    document.body.appendChild(blocnotContainer);
  } catch (error) {
    console.error("произошла ошибка menu: ", error);
  }
}
export { createBlocnotBody };
