function createBlocnotBody() {
  try {
    let blocnotContainer = document.createElement("div");
    blocnotContainer.classList.add("blocnotBody");
    blocnotContainer.style.display = "flex";
    blocnotContainer.style.justifyContent = "center";
    blocnotContainer.style.alignItems = "center";
    blocnotContainer.style.flexDirection = "column";

    let qaPairs = [
      {
        question: "Вопрос 1.1: Что такое JavaScript?",
        answer: `JavaScript - это высокоуровневый, интерпретируемый язык программирования, который используется для создания интерактивных и динамических веб-страниц. Он позволяет разработчикам добавлять функциональность на сайты,
           такие как анимации, формы обратной связи, валидацию данных, обновление контента без перезагрузки страницы и многое другое.
          Основные характеристики JavaScript:
          1)Динамический: JavaScript является динамически типизированным языком, что означает, что типы переменных определяются во время выполнения.
          2)Объектно-ориентированный: Поддерживает объектно-ориентированное программирование, что позволяет создавать объекты и классы.
          3)Прототипное наследование: В JavaScript используется прототипное наследование, которое отличается от классического наследования, используемого в таких языках, как Java или C++.
          4)Интерпретируемый: JavaScript не требует компиляции, он интерпретируется браузером во время выполнения.
          5)Кросс-платформенный: Работает на разных платформах и устройствах, включая настольные компьютеры, мобильные устройства и серверы.`,
      },
      {
        question: "Вопрос 1.2: Что такое примитивные типы данных в JavaScript?",
        answer: `-Это данные, которые не являются объектом и не имеют методов
                 -Примитивные: string, number, boolean, null, undefined, bigint, symbol
                 -Остальные типы: object, function`,
      },
      {
        question:
          "Вопрос 1.3: Что нового привнес в JS стандарт ES6 или ECMAScript2015?",
        answer: `
        Стрелочные функции, 
        Классы, 
        Шаблонные строки,
        Расширенные объектные литералы,
        Деструктуризация,
        Промисы,
        Генераторы,
        Модули,
        Symbol,
        Прокси,
        Множества,
        Параметры по умолчанию,
        Операторы rest и spread,
        Блочная область видимости, ключевые слова «let» и «const»`,
      },
      {
        question: "Вопрос 1.4: Какие значения в JS являются ложными?",
        answer: `Пустая строка, 0, null, undefined, NaN, false`,
      },
      {
        question: "Вопрос 1.5: Чем отличается var, let и const в JavaScript?",
        answer: `Переменные, объявленные с помощью ключевого слова «var», являются глобальными. 
        Это означает, что они доступны из любого места в коде.Переменные, объявленные с помощью
         ключевых слов «let» и «const» имеют блочную область видимости.Разница между «let» и 
         «const» состоит в том, что в первом случае мы может менять значение переменной, а во 
         втором — нет.`,
      },
      {
        question: `Вопрос 1.6: Что произойдет в результате выражения var foo = 10 + "20" и почему?`,
        answer: `Переменная foo примет значение "1020"- В JavaScript это поведение называется приведением типов`,
      },
      {
        question: "Вопрос 1.7: Как быстро преобразовать строку в число?",
        answer: `Можно использовать унарный плюс, он преобразует строку в число, если это возможно. Унарный минус делает тоже самое`,
      },
      {
        question:
          "Вопрос 1.8: Почему результатом сравнения двух похожих объектов является false?",
        answer: `В отличии от примитивов объекты сравниваются по ссылке`,
      },
      {
        question: "Вопрос 1.9: Как проверить, является ли значение ложным?",
        answer: `Следует использовать функцию Boolean или оператор двойное отрицание`,
      },
      {
        question:
          "Вопрос 1.10: Как проверить, что число является четным, без использования деления с остатком?",
        answer: `Для решения данной задачи можно использовать оператор "&" (бинарное и). Оператор "&" сравнивает операнды как бинарные значенияconst isEven = num & 1 ? false : true`,
      },
      {
        question: "Вопрос 1.11: Какое отличие String() от toString()?",
        answer: `toString() не будет работать с undefined или null, потому что класс этих объектов не реализовывает метод toString, а поскольку String является независимым объектом, а не методом, унаследованным от прототипа, то его можно использовать с объектами, у которых нет метода toString()`,
      },
      {
        question: "Вопрос 1.12: Что такое шаблонные литералы?",
        answer: `Шаблонные литералы — относительно новый способ создания строк в JS. Шаблонные литералы создаются с помощью двойных обратных кавычек`,
      },
      {
        question: "Вопрос 1.13: Что такое NaN и какова его роль?",
        answer: `Это специальное значение «Not a Number», которое обычно говорит о том, что была выполнена бессмысленная операция, ошибка математической операции. Так же есть функция isNaN(), которая проверяет является ли строка не числом.`,
      },
      {
        question:
          "Вопрос 1.14: В чем разница между undefined и is not defined?",
        answer: `is not defined это код ошибки при обращении к не существующей переменной. undefined - это значение, присваемое объявленной, но не инициализированной переменной.`,
      },
      {
        question: "Вопрос 1.15: Для чего используется оператор логическое и?",
        answer: `Оператор логическое и, находит и возвращает первое ложное значение либо последний операнд, когда все значения истинные`,
      },
      {
        question: "Вопрос 1.16: В чем разница между атрибутами и свойствами?",
        answer: `Атрибут — это начальное состояние в рендеринге DOM, а свойство — это текущее состояние.`,
      },
      {
        question: "Вопрос 1.17: Для чего используется оператор логическое или?",
        answer: `Оператор логическое находит и возвращает первое истинное значение. Он также использует короткое замыкание.`,
      },
      {
        question:
          "Вопрос 1.18: Является ли использование унарного плюса самым быстрым способом преобразования строки в число?",
        answer: `Согласно MDN оператор "+" действительно является самым быстрым способом преобразования строки в число, поскольку он не выполняет никаких операций со значением, которое является числом.`,
      },
      {
        question: "Вопрос 1.19: Что такое DOM?",
        answer: `DOM или Document Object Model (объектная модель документа) — это прикладной программный интерфейс (API) для работы с HTML и XML документами.`,
      },
      {
        question:
          "Вопрос 1.20: Почему результатом сравнения двух похожих объектов является false?",
        answer: `В JS объекты и примитивы сравниваются по-разному. Примитивы сравниваются по значению. Объекты — по ссылке или адресу в памяти, где хранится переменная.`,
      },
      {
        question:
          "Вопрос 1.21: Для чего используется оператор двойное отрицание?",
        answer: `Оператор двойное отрицание приводит значение справа от него к логическому значению.`,
      },
      {
        question:
          "Вопрос 1.22: Как записать несколько выражений в одну строку?",
        answer: `Для этого мы можем использовать оператор запятая.`,
      },
      {
        question: "Вопрос 1.23: Что такое область видимости (Scope)?",
        answer: `Область видимости — это место, где мы имеем доступ к переменным или функциям. JS имеем три типа областей видимости: глобальная, функциональная и блочная.`,
      },
      {
        question:
          "Вопрос 1.24: Как динамически добавлять и удалять свойства в обьект?",
        answer: `Вы можете добавить свойство к объекту используя, myObject.propName = value, и удалить свойство, используя delete myObject.propName.`,
      },
      {
        question: "Вопрос 1.25: Что делает Object.freeze()?",
        answer: `Object.freeze работает со значениями объектов и делает объект неизменяемым, то есть изменить его свойства невозможно. Можно проверить заморожен ли объект с помощью Object.isFrozen().`,
      },
      {
        question: "Вопрос 1.26: Как можно клонировать объект?",
        answer: `-Оператор spread,
                 -Object assign,
                 -глубокое клонирование: JSON parse c JSON stringify.`,
      },
      {
        question: "Вопрос 1.27: Как определить наличие свойства в объекте?",
        answer: `-Оператор in,
               -Метод hasOwnProperty`,
      },
      {
        question: "Вопрос 1.28: Как в JS создать объект?",
        answer: `Объектный литерал,
                 Функция-конструктор,
                 Метод Object create.`,
      },
      {
        question:
          "Вопрос 1.29: В чем разница между оператором «in» и методом hasOwnProperty?",
        answer: `Оператор «in» проверяет наличие свойства не только в самом объекте, но и в его прототипах, а метод hasOwnProperty — только в объекте.`,
      },
      {
        question:
          "Вопрос 1.30: Какие конструкции языка вы используете для обхода объектов?",
        answer: `Цикл for in или Object keys и forEach.`,
      },
      {
        question: "Вопрос 1.31: Что такое деструктуризация объекта??",
        answer: `Деструктуризация — относительно новый способ получения (извлечения) значений объекта или массива.`,
      },
      {
        question: "Вопрос 1.32: Что такое объект Set?",
        answer: `Объект Set позволяет хранить уникальные значения.`,
      },
      {
        question: "Вопрос 1.33: Что такое объект Map?",
        answer: `Это коллекция ключ значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа и даже объекты.`,
      },
      {
        question: "Вопрос 1.34: Что такое прототип?",
        answer: `-Объект, на который указывает ссылка proto, называется «прототипом»
               -При чтении свойства из объекта, если его в нём нет, оно ищется в proto
               -Операции присвоения или удаления свойства совершаются всегда над самим объектом obj.`,
      },
      {
        question: "Вопрос 1.35: Что такое классы?",
        answer: `Классы — это относительно новый способ написания функций-конструкторов в JS. Это синтаксический сахар для функций-конструкторов. В основе классов лежат те же прототипы и прототипное наследование.`,
      },
      {
        question: "Вопрос 1.36: Как работает прототипное наследование?",
        answer: `-Объекты JS связаны цепочками прототипов с помощью proto свойства, по которым им передаются методы и свойства. При обращении к свойству или методу объекта сначала происходит поиск этого свойства у самого объекта. В случае неудачи поиск перенаправляется в его прототип.
        -Например, когда мы хотим прочитать свойство из object, а оно отсутствует, JavaScript автоматически берёт его из прототипа, если оно существует.`,
      },
      {
        question: "Вопрос 1.37: Как проверить, является ли объект массивом?",
        answer: `Для этого можно использовать встроенный метод Array.isArray().`,
      },
      {
        question:
          "Вопрос 1.38: Объясните, что такое файлы cookie в JavaScript?",
        answer: `-Это данные, хранящиеся в небольших текстовых файлах на вашем компьютере
        -Куки обычно устанавливаются веб-сервером при помощи заголовка Set-Cookie
        -Один из наиболее частых случаев использования куки – это аутентификация`,
      },
      {
        question:
          "Вопрос 1.39: Для чего используются операторы break и continue в JavaScript?",
        answer: `-Break и continue обеспечивают более точный контроль над выполнением кода в цикле
         -Break завершает текущую итерацию и приводит к немедленному выходу из цикла
         -Continue завершает текущую итерацию, но не останавливает цикл
         -Return работает так же как и break и вдобавок может вернуть с функции значение остановив выполнение функции.`,
      },
      {
        question:
          "Вопрос 1.40: В чем смысл и польза указания use strict в начале JavaScript-файла?",
        answer: `Команда use strict включает так называемый строгий режим. В этом режиме предупреждения становятся ошибками.`,
      },
      {
        question: "Вопрос 1.41: Что такое замыкание в JavaScript?",
        answer: `Это создание функции и вместе с ней окружения, к которому она может обращаться. Это позволяет ей работать с переменным и функциям этого окружения в дальнейшем.`,
      },
      {
        question:
          "Вопрос 1.42: Что такое стрелочная функция и какие у нее отличия от обычной?",
        answer: `-Это краткий способ записи функциональных выражений
         -Стрелочные функции не являются конструкторами, то есть нельзя с помощью new создать объект-экземпляр функции
         -Не поддерживает ключевые слова this, если быть точнее, то this в стрелочной функции будет ссылаться на this функции снаружи
         -Отсутствие arguments, содержащий список аргументов с которым обычная функция была вызвана
         -Можно вернуть значение, если стрелочная функция состоит из одной строки
         -В классах не нужна привязка к this, то-есть не нужно писать дополнительную функцию bind
         -Стрелочные функции не имеют атрибута прототипа.`,
      },
      {
        question: "Вопрос 1.43: Какая разница между параметрами и аргументами?",
        answer: `-Аргумент — это конкретное значение, которое мы «передали» функции при её вызове в скобочках. Это значение или набор значений присваивается формальным параметрам этой функции.
         -Параметр — это название переменной, указанное в объявлении функции и ожидающее присваивания конкретного значения в момент вызова функции.
         -Присваиваемое параметру значение и есть аргумент.`,
      },
      {
        question: "Вопрос 1.44: Что такое чейнинг функций?",
        answer: `Это когда мы у объекта можем вызывать функции по цепочке, один за другим.`,
      },
      {
        question:
          "Вопрос 1.45: Как записать несколько выражений в одну строку?",
        answer: `Выражения можно записывать в одну строку через запятую.`,
      },
      {
        question: "Вопрос 1.46: Что такое hoisting (поднятие) в JavaScript?",
        answer: `-Это механизм в JavaScript, в котором переменные и объявления функций, передвигаются вверх своей области видимости перед тем, как код будет выполнен
         -Стоит отметить то, что механизм «поднятия» передвигает только объявления функции или переменной. Назначения переменным остаются на своих местах.`,
      },
      {
        question: "Вопрос 1.47: Как работает Function.prototype.bind()?",
        answer: `Данный метод возвращает функцию, по отношению к которой он вызывается, но с подмененным контекстом.`,
      },
      {
        question: "Вопрос 1.48: Что такое объект arguments?",
        answer: `Arguments — это коллекция аргументов, передаваемых функции. Это объект, подобный массиву, у него есть свойство length, мы можем получить доступ к определенному значению с помощью arguments[i], но у него отсутствуют методы forEach, reduce, filter и map. Он позволяет узнать количество параметров функции.`,
      },
      {
        question: "Вопрос 1.49: Что такое IIFE?",
        answer: `IIFE или Immediately Invoked Function Expression — это функция, которая вызывается или выполняется сразу же после создания или объявления.`,
      },
      {
        question:
          "Вопрос 1.50: Почему функции в JS называют объектами первого класса?",
        answer: `-Потому что они обрабатываются также, как и любое другое значение в JS
         -Важным отличием функции является то, что функция может быть выполнена или вызвана.`,
      },
      {
        question:
          "Вопрос 1.51: В чем разница между Function Declaration и Function Expression?",
        answer: `-Их определение выглядит по разному
         -Механизм поднятия в JS не срабатывает для Function Expression.`,
      },
      {
        question: "Вопрос 1.52: Что такое Рекурсия?",
        answer: `Это когда алгоритм или функция вызывает сама себя.`,
      },
      {
        question: "Вопрос 1.53: Что такое функция высшего порядка?",
        answer: `Это самая обычная функция, которая на вход принимает другую функцию.`,
      },
      {
        question:
          "Вопрос 1.54: Какие приемы работы с асинхронным кодом в JS Вы знаете?",
        answer: `-Функции обратного вызова
         -Промисы
         -Async await`,
      },
      {
        question: "Вопрос 1.55: Что такое промисы?",
        answer: `Промисы — это один из приемов работы с асинхронным кодом в JS. Они возвращают результат асинхронной операции. Промисы были придуманы для решения проблемы так называемого «ада функций обратного вызова».`,
      },
      {
        question:
          "Вопрос 1.56: В чем разница между Promise all и PromiseAllSettled?",
        answer: `-PromiseAll возвращает массив значений от всех промисов
         -PromiseAllSettled возвращает массив с объектами, в которых находятся status, а так же value при разрешении промиса или reason при ошибке.`,
      },
      {
        question: "Вопрос 1.57: Что такое async await?",
        answer: `Async await — относительно новый способ написания асинхронного (неблокирующего) кода в JS. Им оборачивают промис. Он делает код более читаемым и чистым, чем промисы и функции обратного вызова.`,
      },
      {
        question:
          "Вопрос 1.58: В чем разница между spread-оператором и rest-оператором?",
        answer: `Операторы spread и rest имеют одинаковый синтаксис. Разница состоит в том, что с помощью spread мы передаем или распространяем данные массива на другие данные, а с помощью rest — получаем все параметры функции и помещаем их в массив или извлекаем часть параметров.`,
      },
      {
        question: "Вопрос 1.59: Что такое функция обратного вызова?",
        answer: `Функция обратного вызова — это функция, вызов которой отложен на будущее (происходит при некоторых условиях, например, при наступлении события).`,
      },
      {
        question: "Вопрос 1.60: Что такое параметры по умолчанию?",
        answer: `Это относительно новый способ определения значений переменных по умолчанию.`,
      },
      {
        question: "Вопрос 1.61: Что такое мутабельность и иммутабельность?",
        answer: `-Иммутабельность предполагает, что после создания данные или структура, которая их содержит, не могут быть изменены
         -Мутабельность означает что данные могут меняться.`,
      },
      {
        question: "Вопрос 1.62: Что такое модули?",
        answer: `Модули позволяют объединять, использовать, код из разных файлов и избавляют нас от необходимости держать весь код в одном большом файле.`,
      },
      {
        question: "Вопрос 1.63: Расскажите о пирамиде тестирования",
        answer: `Пирамида тестирования — один из способов обеспечения качества ПО, визуализация, которая помогает группировать тесты по типу их назначения.`,
      },
      {
        question: "Вопрос 1.64: Что такое temporal dead zone?",
        answer: `Так как javascript идет сверху вниз, то переменные, которые должны быть определены ниже, попадают в мертвую зону, до того момента пока они не определятся.`,
      },
      {
        question:
          "Вопрос 1.65: Что такое объектная обертка (Wrapper Objects) boxing-unboxing?",
        answer: `Методы – это свойства объектов, в которые записаны функции. Если это так, тогда почему работает такой код? hello.toUpperCase Строка (примитивный тип), у которого нет свойств и методов, но когда мы вызываем метод toUpperCase, это не приводит к ошибке. Временный объект отбрасывается по завершении работы со свойством или методом. Причина такого поведения заключается в том, что hello временно преобразуется в объект. У каждого примитива, кроме null и undefined, есть объект-обертка. Такими объектами являются String, Number, Boolean, Symbol и BigInt.`,
      },
      {
        question: "Вопрос 1.66: Что такое Garbage Collector?",
        answer: `-Управление памятью в JavaScript выполняется автоматически и незаметно для нас. - Основной концепцией управления памятью в JavaScript является принцип достижимости. Достижими считаются те, которые доступны или используются. Они гарантированно находятся в памяти.
         -Чтобы объект стал не достижимым нужно удалить на него все ссылки, после того как он станет не достижимым он удалиться из памяти.`,
      },
      {
        question: "Вопрос 1.67: Что такое дескрипторы свойств объектов?",
        answer: `-Помимо значения value, свойства объекта имеют три специальных атрибута дескрипторов:
         -writable – если true, свойство можно изменить, иначе оно только для чтения.
         -enumerable – если true, свойство перечисляется в циклах, в противном случае циклы его игнорируют.
         -configurable – если true, свойство можно удалить, а эти атрибуты можно изменять, иначе этого делать нельзя.
         -Есть методы, которые ограничивают доступ ко всему объекту, например Object freeze.`,
      },
      {
        question: "Вопрос 1.68: Расскажите о генераторах.",
        answer: `Новый вид функций в современном JavaScript. Они отличаются от обычных тем, что могут приостанавливать своё выполнение, возвращать промежуточный результат и далее возобновлять его позже, в произвольный момент времени.`,
      },
      {
        question:
          "Расскажите о типе данных Symbol и его практическом применении.",
        answer: `-«Символ» представляет собой уникальный идентификатор. Он не являются строкой и по спецификации должен использоваться в объектах как ключ
        -При создании, символу можно дать описание, в основном использующееся для отладки кода: let id = Symbol("id")
        -Свойства, чьи ключи – символы, не перебираются циклом for..in. Object.keys(user) также игнорирует символы.
        -Символы позволяют создавать «скрытые» свойства объектов, к которым нельзя нечаянно обратиться и перезаписать их из других частей программы
        -Для чтения или при отсутствии создания символа из реестра, используется вызов Symbol for key.`,
      },
      {
        question: "Что такое V8 Engine?",
        answer: `-Это высокопроизводительный движок JavaScript и WebAssembly от Google с открытым исходным кодом, написанный на C++
        -Кроме того, что отличает V8 от других движков, он применяется в популярной серверной среде Node.js
        -Для того, чтобы добиться высокой скорости выполнения программ, V8 транслирует JS-код в более эффективный машинный код, не используя интерпретатор.`,
      },
      {
        question: "Что такое Event loop и как он работает?",
        answer: `-Идея событийного цикла очень проста. Есть бесконечный цикл, в котором движок JavaScript ожидает задачи, исполняет их и снова ожидает появления новых. Задачи из очереди исполняются по правилу «первым пришёл – первым ушёл»
        -Кроме главного списка задач существуют микрозадачи и макрозадачи
        -В микрозадачи попадают калбеки завершенных промисов, функции внутри queueMicrotask()
        -В макрозадачи попадают колбеки планирования и обработчики событий
        -Сначала выполняется основной код, затем микрозадачи и за ними макрозадачи.`,
      },
      {
        question: "Что означает аббревиатура CORS?",
        answer: `Cross-Origin Resource Sharing — механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность пользователю получать разрешения на доступ к выбранным ресурсам с сервера на источнике, отличном от того, что сайт использует в данный момент.`,
      },
      {
        question: "Что такое XSS",
        answer: `XSS (Cross-Site Scripting — «межсайтовый скриптинг») — довольно распространенная уязвимость, которую можно обнаружить на множестве веб-приложений. Ее суть довольно проста, злоумышленнику удается внедрить на страницу JavaScript-код, который не был предусмотрен разработчиками.`,
      },
      {
        question:
          "В чем разница между императивным и декларативным программированием?",
        answer: `Императивное программирование — это описание того, как ты делаешь что-то, а декларативное — того, что ты делаешь.`,
      },
      {
        question: "Что такое SPA?",
        answer: `Single Page Application - это реализация веб-приложения таким образом, чтобы при первой загрузке пользователь получал все ресурсы, необходимые для того, чтобы избавиться от загрузки страницы с нуля, при совершении интерактивных действий с интерфейсом.`,
      },
      {
        question:
          "Что такое Объектно-ориентированное программирование и функциональное программирование?",
        answer: `Объектно-ориентированное программирование основано на концепции объектов. Это структуры данных, которые содержат поля данных, известные в JavaScript как свойства, и процедуры, известные как методы (Например: Math с его методами random, max, sin и свойствами такими как PI)
        Функциональное программирование основан на концепции чистых функций, которые избегают общего состояния, изменяемых данных и побочных эффектов`,
      },
      // {question: "",  answer: ``,},
      //{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},
      //{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},
    ];
    qaPairs.forEach((pair) => {
      let question = document.createElement("div");
      question.textContent = pair.question;
      question.classList.add("question");
      question.style.cursor = "pointer";
      question.style.fontWeight = "bold";
      question.style.border = "1px solid black";
      question.style.margin = "2px 0px 2px 0px";
      blocnotContainer.appendChild(question);

      let answer = document.createElement("div");
      answer.textContent = pair.answer;
      answer.classList.add("answer");
      answer.style.display = "none";
      answer.style.marginLeft = "20px";
      blocnotContainer.appendChild(answer);

      question.addEventListener("click", () => {
        answer.style.display =
          answer.style.display === "none" ? "block" : "none";
      });
    });
    document.body.appendChild(blocnotContainer);
  } catch (error) {
    console.error("произошла ошибка menu: ", error);
  }
}
export { createBlocnotBody };
